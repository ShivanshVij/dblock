// Code generated by ent, DO NOT EDIT.

package lock

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shivanshvij/dblock/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Lock {
	return predicate.Lock(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Lock {
	return predicate.Lock(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Lock {
	return predicate.Lock(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Lock {
	return predicate.Lock(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Lock {
	return predicate.Lock(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Lock {
	return predicate.Lock(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Lock {
	return predicate.Lock(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Lock {
	return predicate.Lock(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Lock {
	return predicate.Lock(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Lock {
	return predicate.Lock(sql.FieldEQ(FieldName, v))
}

// VersionID applies equality check predicate on the "versionID" field. It's identical to VersionIDEQ.
func VersionID(v uuid.UUID) predicate.Lock {
	return predicate.Lock(sql.FieldEQ(FieldVersionID, v))
}

// Owner applies equality check predicate on the "owner" field. It's identical to OwnerEQ.
func Owner(v string) predicate.Lock {
	return predicate.Lock(sql.FieldEQ(FieldOwner, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Lock {
	return predicate.Lock(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Lock {
	return predicate.Lock(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Lock {
	return predicate.Lock(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Lock {
	return predicate.Lock(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Lock {
	return predicate.Lock(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Lock {
	return predicate.Lock(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Lock {
	return predicate.Lock(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Lock {
	return predicate.Lock(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Lock {
	return predicate.Lock(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Lock {
	return predicate.Lock(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Lock {
	return predicate.Lock(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Lock {
	return predicate.Lock(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Lock {
	return predicate.Lock(sql.FieldContainsFold(FieldName, v))
}

// VersionIDEQ applies the EQ predicate on the "versionID" field.
func VersionIDEQ(v uuid.UUID) predicate.Lock {
	return predicate.Lock(sql.FieldEQ(FieldVersionID, v))
}

// VersionIDNEQ applies the NEQ predicate on the "versionID" field.
func VersionIDNEQ(v uuid.UUID) predicate.Lock {
	return predicate.Lock(sql.FieldNEQ(FieldVersionID, v))
}

// VersionIDIn applies the In predicate on the "versionID" field.
func VersionIDIn(vs ...uuid.UUID) predicate.Lock {
	return predicate.Lock(sql.FieldIn(FieldVersionID, vs...))
}

// VersionIDNotIn applies the NotIn predicate on the "versionID" field.
func VersionIDNotIn(vs ...uuid.UUID) predicate.Lock {
	return predicate.Lock(sql.FieldNotIn(FieldVersionID, vs...))
}

// VersionIDGT applies the GT predicate on the "versionID" field.
func VersionIDGT(v uuid.UUID) predicate.Lock {
	return predicate.Lock(sql.FieldGT(FieldVersionID, v))
}

// VersionIDGTE applies the GTE predicate on the "versionID" field.
func VersionIDGTE(v uuid.UUID) predicate.Lock {
	return predicate.Lock(sql.FieldGTE(FieldVersionID, v))
}

// VersionIDLT applies the LT predicate on the "versionID" field.
func VersionIDLT(v uuid.UUID) predicate.Lock {
	return predicate.Lock(sql.FieldLT(FieldVersionID, v))
}

// VersionIDLTE applies the LTE predicate on the "versionID" field.
func VersionIDLTE(v uuid.UUID) predicate.Lock {
	return predicate.Lock(sql.FieldLTE(FieldVersionID, v))
}

// VersionIDIsNil applies the IsNil predicate on the "versionID" field.
func VersionIDIsNil() predicate.Lock {
	return predicate.Lock(sql.FieldIsNull(FieldVersionID))
}

// VersionIDNotNil applies the NotNil predicate on the "versionID" field.
func VersionIDNotNil() predicate.Lock {
	return predicate.Lock(sql.FieldNotNull(FieldVersionID))
}

// OwnerEQ applies the EQ predicate on the "owner" field.
func OwnerEQ(v string) predicate.Lock {
	return predicate.Lock(sql.FieldEQ(FieldOwner, v))
}

// OwnerNEQ applies the NEQ predicate on the "owner" field.
func OwnerNEQ(v string) predicate.Lock {
	return predicate.Lock(sql.FieldNEQ(FieldOwner, v))
}

// OwnerIn applies the In predicate on the "owner" field.
func OwnerIn(vs ...string) predicate.Lock {
	return predicate.Lock(sql.FieldIn(FieldOwner, vs...))
}

// OwnerNotIn applies the NotIn predicate on the "owner" field.
func OwnerNotIn(vs ...string) predicate.Lock {
	return predicate.Lock(sql.FieldNotIn(FieldOwner, vs...))
}

// OwnerGT applies the GT predicate on the "owner" field.
func OwnerGT(v string) predicate.Lock {
	return predicate.Lock(sql.FieldGT(FieldOwner, v))
}

// OwnerGTE applies the GTE predicate on the "owner" field.
func OwnerGTE(v string) predicate.Lock {
	return predicate.Lock(sql.FieldGTE(FieldOwner, v))
}

// OwnerLT applies the LT predicate on the "owner" field.
func OwnerLT(v string) predicate.Lock {
	return predicate.Lock(sql.FieldLT(FieldOwner, v))
}

// OwnerLTE applies the LTE predicate on the "owner" field.
func OwnerLTE(v string) predicate.Lock {
	return predicate.Lock(sql.FieldLTE(FieldOwner, v))
}

// OwnerContains applies the Contains predicate on the "owner" field.
func OwnerContains(v string) predicate.Lock {
	return predicate.Lock(sql.FieldContains(FieldOwner, v))
}

// OwnerHasPrefix applies the HasPrefix predicate on the "owner" field.
func OwnerHasPrefix(v string) predicate.Lock {
	return predicate.Lock(sql.FieldHasPrefix(FieldOwner, v))
}

// OwnerHasSuffix applies the HasSuffix predicate on the "owner" field.
func OwnerHasSuffix(v string) predicate.Lock {
	return predicate.Lock(sql.FieldHasSuffix(FieldOwner, v))
}

// OwnerEqualFold applies the EqualFold predicate on the "owner" field.
func OwnerEqualFold(v string) predicate.Lock {
	return predicate.Lock(sql.FieldEqualFold(FieldOwner, v))
}

// OwnerContainsFold applies the ContainsFold predicate on the "owner" field.
func OwnerContainsFold(v string) predicate.Lock {
	return predicate.Lock(sql.FieldContainsFold(FieldOwner, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Lock) predicate.Lock {
	return predicate.Lock(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Lock) predicate.Lock {
	return predicate.Lock(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Lock) predicate.Lock {
	return predicate.Lock(sql.NotPredicates(p))
}
